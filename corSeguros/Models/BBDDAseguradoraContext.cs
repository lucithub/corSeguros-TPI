// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace corSeguros.Models;

public partial class BBDDAseguradoraContext : DbContext
{
    public BBDDAseguradoraContext(DbContextOptions<BBDDAseguradoraContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Anio> Anios { get; set; }

    public virtual DbSet<Barrio> Barrios { get; set; }

    public virtual DbSet<Cliente> Clientes { get; set; }

    public virtual DbSet<Cobertura> Coberturas { get; set; }

    public virtual DbSet<CodigosPostale> CodigosPostales { get; set; }

    public virtual DbSet<Cotizacione> Cotizaciones { get; set; }

    public virtual DbSet<DetallesSeguro> DetallesSeguros { get; set; }

    public virtual DbSet<Localidade> Localidades { get; set; }

    public virtual DbSet<Marca> Marcas { get; set; }

    public virtual DbSet<Modelo> Modelos { get; set; }

    public virtual DbSet<NivelesRiesgo> NivelesRiesgos { get; set; }

    public virtual DbSet<Provincia> Provincias { get; set; }

    public virtual DbSet<Seguro> Seguros { get; set; }

    public virtual DbSet<Sucursale> Sucursales { get; set; }

    public virtual DbSet<TiposSeguro> TiposSeguros { get; set; }

    public virtual DbSet<TiposVehiculo> TiposVehiculos { get; set; }

    public virtual DbSet<Versione> Versiones { get; set; }

    public virtual DbSet<ZonasRiesgo> ZonasRiesgos { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Anio>(entity =>
        {
            entity.HasKey(e => e.IdAnio).HasName("pk_anios");

            entity.Property(e => e.IdAnio).HasColumnName("id_anio");
            entity.Property(e => e.Año).HasColumnName("año");
        });

        modelBuilder.Entity<Barrio>(entity =>
        {
            entity.HasKey(e => e.IdBarrio).HasName("pk_barrio");

            entity.Property(e => e.IdBarrio).HasColumnName("id_barrio");
            entity.Property(e => e.IdLocalidad).HasColumnName("id_localidad");
            entity.Property(e => e.NombreBarrio)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nombre_barrio");

            entity.HasOne(d => d.IdLocalidadNavigation).WithMany(p => p.Barrios)
                .HasForeignKey(d => d.IdLocalidad)
                .HasConstraintName("fk_barrios_localidades");
        });

        modelBuilder.Entity<Cliente>(entity =>
        {
            entity.HasKey(e => e.IdCliente).HasName("pk_clientes");

            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.Apellido)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("apellido");
            entity.Property(e => e.Mail)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("mail");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("nombre");
            entity.Property(e => e.Telefono)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("telefono");
        });

        modelBuilder.Entity<Cobertura>(entity =>
        {
            entity.HasKey(e => e.IdCobertura).HasName("pk_coberturas");

            entity.Property(e => e.IdCobertura).HasColumnName("id_cobertura");
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("descripcion");
        });

        modelBuilder.Entity<CodigosPostale>(entity =>
        {
            entity.HasKey(e => e.IdCodPostal).HasName("pk_codigos_postales");

            entity.ToTable("Codigos_postales");

            entity.Property(e => e.IdCodPostal).HasColumnName("id_cod_postal");
            entity.Property(e => e.IdBarrio).HasColumnName("id_barrio");
            entity.Property(e => e.Numero).HasColumnName("numero");

            entity.HasOne(d => d.IdBarrioNavigation).WithMany(p => p.CodigosPostales)
                .HasForeignKey(d => d.IdBarrio)
                .HasConstraintName("fk_codigos_barrios");
        });

        modelBuilder.Entity<Cotizacione>(entity =>
        {
            entity.HasKey(e => e.IdCotizacion).HasName("pk_cotizaciones");

            entity.Property(e => e.IdCotizacion).HasColumnName("id_cotizacion");
            entity.Property(e => e.Aprobada).HasColumnName("aprobada");
            entity.Property(e => e.FechaEmision)
                .HasColumnType("datetime")
                .HasColumnName("fecha_emision");
            entity.Property(e => e.FechaVenc)
                .HasColumnType("datetime")
                .HasColumnName("fecha_venc");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdCodPostal).HasColumnName("id_cod_postal");
            entity.Property(e => e.IdSeguro).HasColumnName("id_seguro");
            entity.Property(e => e.IdSucursal).HasColumnName("id_sucursal");
            entity.Property(e => e.Precio)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("precio");

            entity.HasOne(d => d.IdClienteNavigation).WithMany(p => p.Cotizaciones)
                .HasForeignKey(d => d.IdCliente)
                .HasConstraintName("fk_cotizaciones_clientes");

            entity.HasOne(d => d.IdCodPostalNavigation).WithMany(p => p.Cotizaciones)
                .HasForeignKey(d => d.IdCodPostal)
                .HasConstraintName("fk_cotizaciones_codigos");

            entity.HasOne(d => d.IdSeguroNavigation).WithMany(p => p.Cotizaciones)
                .HasForeignKey(d => d.IdSeguro)
                .HasConstraintName("fk_cotizaciones_seguros");

            entity.HasOne(d => d.IdSucursalNavigation).WithMany(p => p.Cotizaciones)
                .HasForeignKey(d => d.IdSucursal)
                .HasConstraintName("fk_cotizaciones_sucursales");
        });

        modelBuilder.Entity<DetallesSeguro>(entity =>
        {
            entity.HasKey(e => e.IdDetalle).HasName("pk_detalles");

            entity.ToTable("Detalles_seguro");

            entity.Property(e => e.IdDetalle).HasColumnName("id_detalle");
            entity.Property(e => e.IdCobertura).HasColumnName("id_cobertura");
            entity.Property(e => e.IdSeguro).HasColumnName("id_seguro");

            entity.HasOne(d => d.IdCoberturaNavigation).WithMany(p => p.DetallesSeguros)
                .HasForeignKey(d => d.IdCobertura)
                .HasConstraintName("fk_detalles_coberturas");

            entity.HasOne(d => d.IdSeguroNavigation).WithMany(p => p.DetallesSeguros)
                .HasForeignKey(d => d.IdSeguro)
                .HasConstraintName("fk_detalles_seguros");
        });

        modelBuilder.Entity<Localidade>(entity =>
        {
            entity.HasKey(e => e.IdLocalidad).HasName("pk_localidad");

            entity.Property(e => e.IdLocalidad).HasColumnName("id_localidad");
            entity.Property(e => e.IdProvincia).HasColumnName("id_provincia");
            entity.Property(e => e.NombreLocalidad)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nombre_localidad");

            entity.HasOne(d => d.IdProvinciaNavigation).WithMany(p => p.Localidades)
                .HasForeignKey(d => d.IdProvincia)
                .HasConstraintName("fk_localidades_provincias");
        });

        modelBuilder.Entity<Marca>(entity =>
        {
            entity.HasKey(e => e.IdMarca).HasName("pk_marcas");

            entity.Property(e => e.IdMarca).HasColumnName("id_marca");
            entity.Property(e => e.IdTipo).HasColumnName("id_tipo");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nombre");

            entity.HasOne(d => d.IdTipoNavigation).WithMany(p => p.Marcas)
                .HasForeignKey(d => d.IdTipo)
                .HasConstraintName("fk_marcas_tipos");
        });

        modelBuilder.Entity<Modelo>(entity =>
        {
            entity.HasKey(e => e.IdModelo).HasName("pk_modelos");

            entity.Property(e => e.IdModelo).HasColumnName("id_modelo");
            entity.Property(e => e.IdMarca).HasColumnName("id_marca");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nombre");

            entity.HasOne(d => d.IdMarcaNavigation).WithMany(p => p.Modelos)
                .HasForeignKey(d => d.IdMarca)
                .HasConstraintName("fk_modelos_marcas");
        });

        modelBuilder.Entity<NivelesRiesgo>(entity =>
        {
            entity.HasKey(e => e.IdNivel).HasName("pk_niveles");

            entity.ToTable("Niveles_riesgo");

            entity.Property(e => e.IdNivel).HasColumnName("id_nivel");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("nombre");
        });

        modelBuilder.Entity<Provincia>(entity =>
        {
            entity.HasKey(e => e.IdProvincia).HasName("pk_provincias");

            entity.Property(e => e.IdProvincia).HasColumnName("id_provincia");
            entity.Property(e => e.NombreProvincia)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nombre_provincia");
        });

        modelBuilder.Entity<Seguro>(entity =>
        {
            entity.HasKey(e => e.IdSeguro).HasName("pk_seguros");

            entity.Property(e => e.IdSeguro).HasColumnName("id_seguro");
            entity.Property(e => e.IdTipoSeg).HasColumnName("id_tipo_seg");
            entity.Property(e => e.IdVersion).HasColumnName("id_version");
            entity.Property(e => e.Precio)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("precio");

            entity.HasOne(d => d.IdTipoSegNavigation).WithMany(p => p.Seguros)
                .HasForeignKey(d => d.IdTipoSeg)
                .HasConstraintName("fk_seguros_tipos");

            entity.HasOne(d => d.IdVersionNavigation).WithMany(p => p.Seguros)
                .HasForeignKey(d => d.IdVersion)
                .HasConstraintName("fk_seguros_versiones");
        });

        modelBuilder.Entity<Sucursale>(entity =>
        {
            entity.HasKey(e => e.IdSucursal).HasName("pk_sucursales");

            entity.Property(e => e.IdSucursal).HasColumnName("id_sucursal");
            entity.Property(e => e.Direccion)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("direccion");
            entity.Property(e => e.IdLocalidad).HasColumnName("id_localidad");

            entity.HasOne(d => d.IdLocalidadNavigation).WithMany(p => p.Sucursales)
                .HasForeignKey(d => d.IdLocalidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_sucursales_localidades");
        });

        modelBuilder.Entity<TiposSeguro>(entity =>
        {
            entity.HasKey(e => e.IdTipoSeg).HasName("pk_tipos_seg");

            entity.ToTable("Tipos_seguros");

            entity.Property(e => e.IdTipoSeg).HasColumnName("id_tipo_seg");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nombre");
        });

        modelBuilder.Entity<TiposVehiculo>(entity =>
        {
            entity.HasKey(e => e.IdTipo).HasName("pk_tipos_vehic");

            entity.ToTable("Tipos_vehiculos");

            entity.Property(e => e.IdTipo).HasColumnName("id_tipo");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nombre");
        });

        modelBuilder.Entity<Versione>(entity =>
        {
            entity.HasKey(e => e.IdVersion).HasName("pk_versiones");

            entity.Property(e => e.IdVersion).HasColumnName("id_version");
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("descripcion");
            entity.Property(e => e.IdAnio).HasColumnName("id_anio");
            entity.Property(e => e.IdModelo).HasColumnName("id_modelo");

            entity.HasOne(d => d.IdAnioNavigation).WithMany(p => p.Versiones)
                .HasForeignKey(d => d.IdAnio)
                .HasConstraintName("fk_versiones_anios");

            entity.HasOne(d => d.IdModeloNavigation).WithMany(p => p.Versiones)
                .HasForeignKey(d => d.IdModelo)
                .HasConstraintName("fk_versiones_modelos");
        });

        modelBuilder.Entity<ZonasRiesgo>(entity =>
        {
            entity.HasKey(e => e.IdZona).HasName("pk_zonas");

            entity.ToTable("Zonas_riesgo");

            entity.Property(e => e.IdZona).HasColumnName("id_zona");
            entity.Property(e => e.IdCodPostal).HasColumnName("id_cod_postal");
            entity.Property(e => e.IdNivel).HasColumnName("id_nivel");

            entity.HasOne(d => d.IdCodPostalNavigation).WithMany(p => p.ZonasRiesgos)
                .HasForeignKey(d => d.IdCodPostal)
                .HasConstraintName("fk_zonas_codigos");

            entity.HasOne(d => d.IdNivelNavigation).WithMany(p => p.ZonasRiesgos)
                .HasForeignKey(d => d.IdNivel)
                .HasConstraintName("fk_zonas_niveles");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}